#!/bin/env perl
########################################################################
# housekeeping
########################################################################

use v5.12;
use FindBin::libs;

use Dancer;

use File::Temp  qw( tempfile tempdir );
use URI::Encode qw( uri_decode );

use WCurve;

########################################################################
# package variables
########################################################################

my $verbose = $ENV{ VERBOSE } || $^P || '';

my $wc      = WCurve->new( qw( FloatCyl factory_object ) );

my $json_tmp
= do
{
    my $tmp = 'w-curve-tmp';
    my $pub = "public/$tmp";

    -e $pub || mkdir $pub or die "'$pub', $!";

    -r $pub or die "Non-readable: '$pub'";
    -w _    or die "Non-writeable: '$pub'";
    -x _    or die "Non-executable: '$pub'";

    "$pub/json.XXXXXX"
};

print STDERR "JSON tmpfile: '$json_tmp'\n";

# fixed paths are relative to public/lib

my @fixed_pathz =
(
    [ qw( /         curview/curview.html                            ) ],
    [ qw( /glge     curview/glge-compiled-min.js                    ) ],
    [ qw( /css      curview/jquery_ui/jquery-ui-1.8.13.custom.css   ) ],
    [ qw( /curview  curview/curview.xml                             ) ],
    [ qw( /wcurve   wcurve/W-Curve.js                               ) ],
);

########################################################################
# anonymous sub handed back to Dancer as the service handler
########################################################################

for( @fixed_pathz )
{
    my ( $uri, $base ) = @$_;

    my $path    = "lib/$base";

    my $sanity  = "./public/$path";

    -e $sanity  or die "Non-existant fixed path: '$base' ($path)";
    -r _        or die "Non-readable fixed path: '$base' ($path)";

    print STDOUT "Found: '$sanity' ($uri -> $base)\n";

    get $uri
    => do
    {
        if( $verbose )
        {
            my $msg = "Fixed path: $uri -> $path\n";

            sub
            {
                print STDERR $msg;

                send_file $path
            }
        }
        else
        {
            sub { send_file $path }
        }
    };
}

get '/jquery_ui/js/:file' => 
do
{
    my $ui_dir  = 'lib/curview/jquery_ui';
    my %ui_filz
    = qw
    (
        jquery-1.5.1.min.js             jquery-1.5.1.min.js
        jquery-ui-1.8.13.custom.min.js  jquery-ui-1.8.13.custom.min.js
    );

    for( values %ui_filz )
    {
        my $sanity  = "public/$ui_dir/$_";

        -e $sanity  or die "Non-existant fixed path: '$sanity' ($_)";
        -r _        or die "Non-readable fixed path: '$sanity' ($_)";

        $_  = "$ui_dir/$_";

        print STDERR "Found: '$_'\n";
    }

    if( $verbose )
    {
        sub 
        {
            my $file = params->{ file };

            my $path    = $ui_filz{ $file };

            print STDERR "jquery ui: $file -> $path\n";
                   
            send_file $path
        }
    }
    else
    {
        sub
        {
            my $file    = params->{ file };

            send_file $ui_filz{ $file }
        }
    }
};

get '/json/:json' =>
sub
{
$DB::single = 1;

	request->is_ajax
    or return;

    # since already in JSON form just send it back

    header qw( Content-Type application/json );

    params->{ json }
};

get '/fasta/:data' =>
sub
{
$DB::single = 1;

    # this should use a session cookie and do something 
    # to purge the files after a session goes away or 
    # times out. for now they can be re-generated one
    # by one as necessary.

    request->is_ajax
    or return;

    my $data    = uri_decode params->{ data };

    $data =~ s{([CATG\s]+)}{\n$1}ixg;

    my ( $fh, $path ) = tempfile $json_tmp;

    print STDERR "Scratch file: '$path'\n";

    print $fh $wc->read_seq( $data )->curview;
    close $fh;

    send_file $path 
    => qw( Content-Type application/json system_path 1 );
};		

post '/fasta' =>
sub
{
    request->is_ajax
    or return;

    # what is the arg to upload used for: dirname, basename?

    my $file    = upload '/var/tmp';

    my $input   = $file->file_handle;

    header qw( Content-Type application/json );

    $wc->read_seq( $input )->curview
};      

# there is no escape...

dance

__END__

=head1 NAME

server - W-curve server using Curview library.

=head1 SYNOPIS


=head1 DESCRIPTION

=head1 AUTHOR

Scott Zintak <>

=head1 COPYRIGHT

Copyright (C) 2011 Scott Zintak, all rights reserved.

=head1 LICENSE

The code is released under the same terms as Perl-5.14 itself.	

